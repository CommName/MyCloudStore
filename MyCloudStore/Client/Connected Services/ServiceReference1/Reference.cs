//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICloudService")]
    public interface ICloudService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/getYourFileNames", ReplyAction="http://tempuri.org/ICloudService/getYourFileNamesResponse")]
        string[] getYourFileNames(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/getYourFileNames", ReplyAction="http://tempuri.org/ICloudService/getYourFileNamesResponse")]
        System.Threading.Tasks.Task<string[]> getYourFileNamesAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/getChunkSize", ReplyAction="http://tempuri.org/ICloudService/getChunkSizeResponse")]
        uint getChunkSize();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/getChunkSize", ReplyAction="http://tempuri.org/ICloudService/getChunkSizeResponse")]
        System.Threading.Tasks.Task<uint> getChunkSizeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/createNewFile", ReplyAction="http://tempuri.org/ICloudService/createNewFileResponse")]
        void createNewFile(string username, string password, string fileName, string fileHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/createNewFile", ReplyAction="http://tempuri.org/ICloudService/createNewFileResponse")]
        System.Threading.Tasks.Task createNewFileAsync(string username, string password, string fileName, string fileHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/uploadData", ReplyAction="http://tempuri.org/ICloudService/uploadDataResponse")]
        void uploadData(string username, string password, string fileName, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/uploadData", ReplyAction="http://tempuri.org/ICloudService/uploadDataResponse")]
        System.Threading.Tasks.Task uploadDataAsync(string username, string password, string fileName, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/downloadFile", ReplyAction="http://tempuri.org/ICloudService/downloadFileResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="done")]
        bool downloadFile(string username, string password, string fileName, int offSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/downloadFile", ReplyAction="http://tempuri.org/ICloudService/downloadFileResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="done")]
        System.Threading.Tasks.Task<bool> downloadFileAsync(string username, string password, string fileName, int offSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/createNewUser", ReplyAction="http://tempuri.org/ICloudService/createNewUserResponse")]
        void createNewUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/createNewUser", ReplyAction="http://tempuri.org/ICloudService/createNewUserResponse")]
        System.Threading.Tasks.Task createNewUserAsync(string username, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICloudServiceChannel : Client.ServiceReference1.ICloudService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CloudServiceClient : System.ServiceModel.ClientBase<Client.ServiceReference1.ICloudService>, Client.ServiceReference1.ICloudService {
        
        public CloudServiceClient() {
        }
        
        public CloudServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CloudServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] getYourFileNames(string username, string password) {
            return base.Channel.getYourFileNames(username, password);
        }
        
        public System.Threading.Tasks.Task<string[]> getYourFileNamesAsync(string username, string password) {
            return base.Channel.getYourFileNamesAsync(username, password);
        }
        
        public uint getChunkSize() {
            return base.Channel.getChunkSize();
        }
        
        public System.Threading.Tasks.Task<uint> getChunkSizeAsync() {
            return base.Channel.getChunkSizeAsync();
        }
        
        public void createNewFile(string username, string password, string fileName, string fileHash) {
            base.Channel.createNewFile(username, password, fileName, fileHash);
        }
        
        public System.Threading.Tasks.Task createNewFileAsync(string username, string password, string fileName, string fileHash) {
            return base.Channel.createNewFileAsync(username, password, fileName, fileHash);
        }
        
        public void uploadData(string username, string password, string fileName, byte[] data) {
            base.Channel.uploadData(username, password, fileName, data);
        }
        
        public System.Threading.Tasks.Task uploadDataAsync(string username, string password, string fileName, byte[] data) {
            return base.Channel.uploadDataAsync(username, password, fileName, data);
        }
        
        public bool downloadFile(string username, string password, string fileName, int offSet) {
            return base.Channel.downloadFile(username, password, fileName, offSet);
        }
        
        public System.Threading.Tasks.Task<bool> downloadFileAsync(string username, string password, string fileName, int offSet) {
            return base.Channel.downloadFileAsync(username, password, fileName, offSet);
        }
        
        public void createNewUser(string username, string password) {
            base.Channel.createNewUser(username, password);
        }
        
        public System.Threading.Tasks.Task createNewUserAsync(string username, string password) {
            return base.Channel.createNewUserAsync(username, password);
        }
    }
}
